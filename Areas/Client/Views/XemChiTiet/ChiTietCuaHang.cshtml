@using ThueXeDapHoiAn.Areas.Client.Models.ViewModels
@model ChiTietCuaHangViewModel_Client
@{
    Layout = "~/Areas/Client/Views/Shared/_Layout.cshtml";
}

@section Styles {
<link rel="stylesheet" href="~/css/LayoutClient.css" />
<link rel="stylesheet" href="~/css/ChiTietCuaHang.css" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.css" type="text/css" />
<style>
    #map {
        width: 50%;
        aspect-ratio: 16 / 9;
        margin: 20px;
        border-radius: 8px;
        display: inline;
    }
</style>

}
<style>
    .stars i {
        color: gold; /* hoặc #f5c518 */
        font-size: 1.2rem;
        margin-right: 2px;
    }
</style>
<div class="banner">
    <div style="display: flex;width: 20%;justify-content: center;flex-direction: column;">
        <div style="display: flex; margin-top: 20px;">
            <h5 style="color: white;font-size: 20px;margin-left: 40px;">@Model.CuaHang.TenCuaHang</h5>
            @{
                var diem = Model.DiemTrungBinh ?? 0;
                var soSaoDay = (int)Math.Floor(diem);
                var coSaoLe = diem - soSaoDay >= 0.5;
                var soSaoTrong = 5 - soSaoDay - (coSaoLe ? 1 : 0);
            }
        </div>
        <div class="stars">
            @{
                double rating = Model.DiemTrungBinh ?? 0; // đề phòng null
                int fullStars = (int)Math.Floor(rating);
                bool hasHalfStar = (rating - fullStars) >= 0.25 && (rating - fullStars) < 0.75;
                int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
            }

            <div style="margin-left:40px" class="stars text-warning">
                @for (int i = 0; i < fullStars; i++)
                {
                    <i class="fas fa-star"></i>  <!-- full star -->
                }
                @if (hasHalfStar)
                {
                    <i class="fas fa-star-half-alt"></i>  <!-- half star -->
                }
                @for (int i = 0; i < emptyStars; i++)
                {
                    <i class="far fa-star"></i>  <!-- empty star -->
                }
            </div>
        </div>
        <p style="margin-left: 40px;" class="text">
            @Model.CuaHang.GioiThieu
        </p>
        <div>
            <p style="color: white;margin-left: 40px;"><i class="fa-solid fa-square-phone"></i> @Model.CuaHang.SoDienThoai</p>
            <p style="color: white;margin-left: 40px;"><i class="fa-solid fa-location-dot"></i> @Model.CuaHang.DiaChi</p>
        </div>
    </div>
    <div style="width: 20%; display: flex; justify-content: center; align-items: center;"><img src="@Model.CuaHang.HinhAnh" alt="Banner" style="width: 100%; height:100%; aspect-ratio: 1/1; object-fit: contain"></div>
    <div id="map"></div>
</div>

<main class="main-content">

    <vc:loai-xe></vc:loai-xe>

    <section class="bike-list">
        @foreach (var xe in Model.DanhSachXe)
        {
            <a asp-area="Client" asp-controller="XemChiTiet" asp-action="ChiTietXe" asp-route-id="@xe.IdXe">
                <div class="xe-card">
                    <img src="~/images/@xe.HinhAnh" alt="Xe đạp đua">
                    <div class="xe-card-body">
                        <p class="tenXe">@xe.TenXe</p>
                        <p class="moTa">@xe.GioiThieu</p>
                        <p class="gia">Giá thuê chỉ từ:</p>
                        <span>@xe.GiaThueTheoGio.ToString("N0") đ/chiếc</span>
                    </div>
                </div>
            </a>
        }

    </section>
</main>
@section Scripts {
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.js"></script>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-language/v1.0.0/mapbox-gl-language.js"></script>
    <script>
        const idCuaHang = new URLSearchParams(window.location.search).get("id");

        // Hàm dựng HTML của từng xe
        function createXeCard(xe) {
            return `
                <a href="/Client/ChiTietXe?id=${xe.idXe}">
                    <div class="xe-card">
                        <img src="/images/${xe.hinhAnh}" alt="${xe.tenXe}">
                        <div class="xe-card-body">
                            <p class="tenXe">${xe.tenXe}</p>
                            <p class="moTa">${xe.gioiThieu}</p>
                            <p class="gia">Giá thuê chỉ từ:</p>
                            <span>${Number(xe.giaThueTheoGio).toLocaleString()} đ/chiếc</span>
                        </div>
                    </div>
                </a>
            `;
        }

        async function fetchXeTheoLoai() {
            const checkedValues = Array.from(document.querySelectorAll(".filter-checkbox:checked"))
                .map(cb => cb.value);

            const url = new URL("/Client/XemChiTiet/GetXeTheoLoai", window.location.origin);
            if (idCuaHang) {
                url.searchParams.append("idCuaHang", idCuaHang);
            }

            checkedValues.forEach(id => url.searchParams.append("idLoaiXe", id));

            try {
                const res = await fetch(url.toString());
                if (!res.ok) throw new Error("Lỗi mạng: " + res.status);

                const data = await res.json();
                const container = document.querySelector(".bike-list");

                if (!container) {
                    console.error("Không tìm thấy phần tử .bike-list");
                    return;
                }

                container.innerHTML = "";

                if (data.length === 0) {
                    container.innerHTML = "<p>Không có xe phù hợp.</p>";
                    return;
                }

                container.innerHTML = data.map(createXeCard).join("");
            } catch (error) {
                console.error("Lỗi khi lấy dữ liệu xe:", error);
                const container = document.querySelector(".bike-list");
                if (container) {
                    container.innerHTML = "<p>Đã xảy ra lỗi khi tải dữ liệu xe. Vui lòng thử lại sau.</p>";
                }
            }
        }

        // Gắn sự kiện khi checkbox thay đổi
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".filter-checkbox").forEach(cb => {
                cb.addEventListener("change", fetchXeTheoLoai);
            });

            fetchXeTheoLoai(); // Tải danh sách lần đầu khi trang được load
        });
    </script>
    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoiaGFuaG9nYW4iLCJhIjoiY21iajcydzUyMGN4NjJqcTFnOWN2amQ4MSJ9.he4lo9oQTGFwphDygXxfsQ'; // replace with your token

        const diaChi = "@Html.Raw(Model.CuaHang.DiaChi.Replace("'", "\\'"))";

        async function showMapFromAddress(address) {
            try {
                const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?access_token=${mapboxgl.accessToken}`);
                const data = await response.json();

                if (data.features.length === 0) {
                    console.error("Không tìm thấy địa điểm");
                    return;
                }

                const [lng, lat] = data.features[0].center;

                const map = new mapboxgl.Map({
                    container: 'map',
                    style: 'mapbox://styles/mapbox/streets-v11',
                    center: [lng, lat],
                    zoom: 14
                });

                map.addControl(new MapboxLanguage({ defaultLanguage: 'vi' }));

                // Tạo Marker cho cửa hàng
                const marker = new mapboxgl.Marker()
                    .setLngLat([lng, lat])
                    .setPopup(new mapboxgl.Popup().setText("@Model.CuaHang.TenCuaHang"))
                    .addTo(map);

                // Tạo Directions control (ẩn input)
                const directions = new MapboxDirections({
                    accessToken: mapboxgl.accessToken,
                    unit: 'metric',
                    profile: 'mapbox/walking',
                    controls: {
                        inputs: false,
                        instructions: true
                    }
                });

                // Sự kiện click vào Marker để lấy vị trí hiện tại và vẽ đường đi
                marker.getElement().addEventListener('click', () => {
                    if (!navigator.geolocation) {
                        alert("Trình duyệt không hỗ trợ định vị vị trí.");
                        return;
                    }

                    navigator.geolocation.getCurrentPosition(
                        position => {
                            const userCoords = [position.coords.longitude, position.coords.latitude];

                            directions.setOrigin(userCoords);
                            directions.setDestination([lng, lat]);

                            if (!map.hasControl(directions)) {
                                map.addControl(directions, 'top-left');
                            }
                        },
                        error => {
                            console.error("Không thể lấy vị trí người dùng:", error);
                            alert("Không thể lấy vị trí của bạn.");
                        }
                    );
                });

            } catch (error) {
                console.error("Lỗi khi tải bản đồ:", error);
            }
        }


        document.addEventListener("DOMContentLoaded", function () {
            showMapFromAddress(diaChi);
        });
    </script>


}


